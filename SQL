SQL SELECT
используется для выбора данных из базы данных.
SELECT  - выбирать
from – из
Select имя_столбца, имя_столбца, имя_столбца from имя_таблицы;
Чтобы вывелась вся таблица необходимо:
SELECT * FROM имя_таблицы;

SQL SELECT DISTINCT
используется для возврата только различных значений.
DISTINCT – отчетливый
Чтобы вывести значения в столбце в таблице без их повторения необходимо:
Select Distinct имя_столбца from имя_таблицы;

COUNT
Если добавить COUNT и обернуть в кавычки (DISTINCT имя_столбца), то программа почитает количество разных стран (без учета одинаковых).
COUNT – считать 
SELECT COUNT(DISTINCT имя_столбца) FROM имя_таблицы;
COUNT

SQL WHERE 
WHERE - где
WHERE используется для фильтрации записей.
Оно используется для извлечения только тех записей, которые удовлетворяют указанному условию.
Примечание:  WHERE используется не только в SELECT , оно также используется в UPDATE, DELETE и т.д.!
select * from имя_таблицы
where имя_колонки='значение_в_этой_колонке';
Текст должен быть обернут в кавычки (либо одинарные, либо двойные). Число же не надо оборачивать в кавычки. При использовании чисел можно применять не только =, но и >, <.
Select * from имя_таблицы
where имя_столбца=значение_столбца;
Select * from Customers
where CustomerID>5;

SQL ORDER BY
ORDER – упорядочить
by - от
используется для сортировки результирующего набора в порядке возрастания (выводится полная таблица).
Select * from имя_таблицы
order by имя_колонки;
Если взять значение не цифровое, а текстовое, то сортировка будет выстроена по алфавиту
Desc – добавив данное выражение мы получим сортировку по убыванию.
Select * from Products
order by Price desc;
Тоже самое с текстовым значением.
Следующая инструкция SQL выбирает всех клиентов из таблицы "Customers", отсортированных по столбцу "Country" и "CustomerName". Это означает, что он упорядочивает по стране, но если некоторые строки имеют одну и ту же страну, он упорядочивает их по имени пользователя, причем сортировка идет по Country в алфавитном порядке:
select * from имя_таблицы
order by имя_столбца(главный), имя_столбца;
asc – сортировка по убыванию
Можно сочетать asc и desc вместе:
SQL выбирает всех клиентов из таблицы "Customers", отсортированных по возрастанию по "Стране" и по убыванию по столбцу "CustomerName":
select * from имя_таблицы
order by имя_столбца(главное) asc, имя_столбца desc;
WHERE Предложение может содержать один или несколько AND.
AND используется для фильтрации записей на основе более чем одного условия, например, если вы хотите вернуть всех клиентов из Испании, которые начинаются с буквы "G":
Select * from имя_таблицы
LIKE – аналогичный 
AND Оператор отображает запись, если все условия выполнены.
OR Оператор отображает запись, если любое из условий выполнено.
Пример:
Select * from имя_таблицы
where имя_столбца = ‘значение_столбца’
and имя_столбца = ‘значение_столбца’
and имя_столбца > значение_столбца;

SQL AND
WHERE Предложение может содержать один или несколько AND.
AND используется для фильтрации записей на основе более чем одного условия, например, если вы хотите вернуть всех клиентов из Испании, которые начинаются с буквы "G":
Select * from имя_таблицы
where имя_столбца = 'значение_в_столбце' and имя_столбца like 'B%';
LIKE – аналогичный 
AND Оператор отображает запись, если все условия выполнены.
OR Оператор отображает запись, если любое из условий выполнено.
Пример
Select * from имя_таблицы
where имя_столбца = ‘значение_столбца’
and имя_столбца = ‘значение_столбца’
and имя_столбца > значение_столбца;
Вы можете комбинировать операторы AND и OR .
Следующая инструкция SQL выбирает всех клиентов из Испании, которая начинается с "G" или "R".
Убедитесь, что вы используете круглые скобки, чтобы получить правильный результат.
Пример
Выберите всех испанских клиентов, которые начинаются либо на "G", либо на "R".:
Select * from имя_таблицы
where имя_столбца = ‘значение_столбца’
and(имя_столбца like 'G%' or имя_столбца like 'R%');
Без круглых скобок оператор select вернет всех клиентов из Испании, которые начинаются с буквы "G"., plus все клиенты, начинающиеся с буквы "R", независимо от значения страны:
Пример
Выберите всех клиентов, которые либо:
из Испании, либо начинаются на "G"., или
начинается с буквы "R".:
Select * from имя_таблицы
where имя_столбца = 'значение_столбца'
and имя_столбца like 'G%' or имя_столбца like 'R%';

SQL OR
or – или
WHEREПредложение может содержать один или несколько OR
OR используется для фильтрации записей на основе нескольких условий, например, если вы хотите вернуть всех клиентов из Германии, но также и из Испании:
Select * from имя_таблицы
where имя_столбца = 'значение_столбца' or имя_столбца = 'значение_столбца';
OR отображает запись, если любое из условий выполнено.
AND отображает запись, если все условия выполнены.
Следующая инструкция SQL выбирает все поля Клиентов, в которых City указано "Berlin", CustomerName начинается с буквы "G" или Country указано "Norway".:
Select * from имя_таблицы
where имя_столбца = 'значение_столбца'
or имя_столбца like 'G%'
or имя_столбца = 'значение_столбца';
Вы можете комбинировать операторы AND и OR .
Следующая инструкция SQL выбирает всех клиентов из Испании, которая начинается с "G" или "R".
Убедитесь, что вы используете круглые скобки, чтобы получить правильный результат.
Select * from имя_таблицы
where имя_столбца = 'значение_столбца'
and (имя_столбца like 'G%' or имя_столбца like 'R%');
Без круглых скобок оператор select вернет всех клиентов из Испании, которые начинаются с буквы "G"., plus все клиенты, начинающиеся с буквы "R", независимо от значения страны:

SQL NOT
NOT Оператор используется в сочетании с другими операторами для получения противоположного результата, также называемого отрицательным результатом.
В приведенной ниже инструкции select мы хотим вернуть всех клиентов, которые НЕ из Испании:
Select * from имя_таблицы
where not имя_столбца = 'значение_столбца';
В приведенном выше примере оператор NOT используется в сочетании с оператором = , но он может использоваться в сочетании с другими операторами сравнения и /или логическими операторами. Смотрите примеры ниже.
Выберите клиентов, которые не начинаются с буквы "A":
Select * from Customers
where CustomerName not like 'A%';
Выберите клиентов с идентификатором CustomerID не от 10 до 60:
Select * from Customers
where CustomerID not between 10 and 60;
between – между 
Выберите клиентов, которые не из Парижа или Лондона:
Select * from Customers
where City not in ('Paris', 'London');     
Выберите клиентов с идентификатором CustomerID, не превышающим 50:
Select * from Customers
where not CustomerID > 50;      
Примечание: Существует оператор not-greater-then: !> который даст вам тот же результат. 
Выберите клиентов с идентификатором CustomerID не менее 50:
Select * from Customers
where not CustomerID < 50;                                  
Примечание: Существует оператор not-less-then: !< который дал бы вам тот же результат.

SQL INSERT INTO
Инструкция INSERT INTO используется для вставки новых записей в таблицу.
INSERT  - вставлять
Также возможно вставить несколько строк в одну инструкцию.
Для вставки нескольких строк данных мы используем одну и ту же INSERT INTO инструкцию, но с несколькими значениями:
INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES
('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway'),
('Greasy Burger', 'Per Olsen', 'Gateveien 15', 'Sandnes', '4306', 'Norway'),
('Tasty Tee', 'Finn Egan', 'Streetroad 19B', 'Liverpool', 'L1 0AA', 'UK');
Убедитесь, что вы разделяете каждый набор значений запятой ,.

SQL NULL Values
Поле с НУЛЕВЫМ значением - это поле без значения.
null – нулевой, пустой
Если поле в таблице является необязательным, можно вставить новую запись или обновить запись без добавления значения в это поле. Затем поле будет сохранено с нулевым значением.
Примечание: НУЛЕВОЕ значение отличается от нулевого значения или поля, содержащего пробелы. Поле с нулевым значением - это поле, которое было оставлено пустым при создании записи!
Невозможно проверить наличие нулевых значений с помощью операторов сравнения, таких как =, < или <>.
Вместо этого нам придется использовать операторы IS NULL и IS NOT NULL.
IS NULL Оператор используется для проверки наличия пустых значений (NULL values).
В следующем SQL перечислены все клиенты с нулевым значением в поле "Адрес":
Select CustomerName, ContactName, Address
from Customers
where Address is null;
Совет: Всегда используйте значение IS NULL для поиска нулевых значений.
IS NOT NULLОператор используется для проверки наличия непустых значений (NOT NULL values).
В следующем SQL перечислены все клиенты со значением в поле "Адрес":
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address ISNOT NULL;

SQL UPDATE
Инструкция UPDATE используется для изменения существующих записей в таблице.
UPDATE – ОБНОВЛЕНИЕ
Примечание: Будьте осторожны при обновлении записей в таблице! Обратите внимание на предложение WHERE в инструкции UPDATE . WHEREВ предложении указывается, какие записи следует обновить. Если вы опустите WHERE предложение, все записи в таблице будут обновлены!
Следующая инструкция SQL обновляет первого клиента (CustomerID = 1) новым контактным лицом и новым городом.
Update Customers
set ContactName='Alfred Schmidt', City='Frankfurt'
where CustomerID=1;
Это WHERE предложение, которое определяет, сколько записей будет обновлено.
Следующая инструкция SQL обновит имя контакта до "Juan" для всех записей, где страна - "Мексика".:
Update Customers
set ContactName='Juan'
where Country='Mexico';






